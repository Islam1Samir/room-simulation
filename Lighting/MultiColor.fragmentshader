#version 330 core

// input data
in vec3 fragmentColor;
in vec3 position_worldspace;
in vec3 normal_worldspace;
in vec2 TexCoord;
uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;
uniform sampler2D myTextureSampler;
// Ouput data
out vec3 color;
uniform int RenderingMode;
uniform vec3 lookat;
void main()
{
 float spot = 0;
	// Diffuse light calculations.
	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	vec3 diffuseLight = vec3(brightness,brightness,brightness);
	diffuseLight = clamp(diffuseLight,0,1);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = clamp(specularLight,0,1);
	vec3 amb=lightVector/9;
	//color = ambientLight + amb*(diffuseLight + specularLight);
	//color = fragmentColor;
	vec3 da=vec3(0,0,0);
	vec3 textureColor =texture(myTextureSampler, TexCoord).rgb;
	if(RenderingMode == 0)
		color = textureColor+ambientLight + amb*(diffuseLight + specularLight);

if(RenderingMode == 1)
	color = (textureColor * ambientLight);
	
if(RenderingMode == 2){
	
	if (dot(-lightVector ,lookat ) >= cos(0.2f))
	spot = dot(-lightVector ,lookat );
	else 
	spot = 0;
	
	vec3 I =ambientLight + spot *(diffuseLight + specularLight);
	
	color = (textureColor * I);	
	}
	
	
}